---
title: "Differential Expression Analysis of Japanese Quail Immune Responses"
output: html_notebook
---


```{r}
## Setup
### Bioconductor and CRAN libraries used

# Below, I am sourcing the install_script.R to help out the user install the required BiocManager package manager and the required Bioconductor packages (including DESeq2 and DEGreport)
# source("src/install_script.R", local = knitr::knit_global())

# Run the following: 
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(apeglm) # needed when computing the log-shrinkage in R code chunk beginning at line 94
library(testthat) # Required library for unit tests performed below 
```

```{r}
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1) 

meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)

### Check classes of the data we just brought in
test_that("classType", {
  expect_equal(class(meta), "data.frame")
  expect_equal(class(data), "data.frame")
})

# Viewing the data to double-check before performing analysis 
# View(meta)
# View(data)
```



```{r}
# Let us now create our DeSeq2 Dataset object so we can run Prinicipal Component Analysis (PCA Analysis) later below

## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)


# Now that we have created our DESeq2Dataset object, let us normalize the count values by calling the estimateSizeFactors function (see below)
dds <- estimateSizeFactors(dds)

# Let's make sure that the normalized factors are in our data frame 
sizeFactors(dds)

# Let us compute the normalized RNA sequence counts 
normalized_counts <- counts(dds, normalized=TRUE)

# Let's write our normalized values out to a file to save it for further use
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
```


```{r}
# Below we run PCA (Principal Component Analysis)

# Let us now moderate the variance for our normalized counts in order to improve the distances/clustering so we can properly perform/conduct principal component analysis (PCA) 
# and hierarchical clustering

#rlog() function will transform the normalized counts 

rld <- rlog(dds, blind=TRUE)

# Now that we have moderated the variance, let us run the PCA on our normalized RNA sequence counts

plotPCA(rld, intgroup="sampletype")
```


```{r}
# Below we run the Differential Expression (DE) Analysis using our dds object we created above 

## Run analysis
dds <- DESeq(dds)

# Let's make sure that resultsNames(dds) is a character vector 
test_that("classTypeResultsNames", {
  expect_equal(class(resultsNames(dds)), "character")
  })

resultsNames(dds)

## Plot dispersion estimates
plotDispEsts(dds)
```

```{r}
# We will now perform our hypothesis testing using a Walfowitz test.

# Let's perform a Wald test and DE analysis for the MOV10_OE (overexpression) vs. the control group 
# Let us now perform log2 shrinking (LFC)
res_tableOE <- lfcShrink(dds, coef = 3)



# Let's perform a Wald test and DE analysis for the MOV10_KD (knockdown) vs. the control group 

# LFC Shrinking for the KnockDown genes
res_tableKD <- lfcShrink(dds, coef = 2)

```


```{r}
# Let's extract DE genes for overexpression 

## Summarize results
summary(res_tableOE)

### Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 0.58

# Create a tibble from our res_tableOE
res_tableOE_tb <- res_tableOE %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()


sigOE <- res_tableOE_tb %>%
  filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)


sigOE
```



```{r}
# Let's extract DE genes for knockdown 
summary(res_tableKD)

res_tableKD_tb <- res_tableKD %>%
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

sigKD <- res_tableKD_tb %>%
  filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)


sigKD
```



```{r}
# Finally, let us visualize our results below 

# Create tibbles including row names from meta and normalized_counts objects created earlier 
mov10_meta <- meta %>% 
  rownames_to_column(var="samplename") %>% 
  as_tibble()

normalized_counts <- normalized_counts %>% 
  data.frame() %>%
  rownames_to_column(var="gene") %>% 
  as_tibble()

# Plot expression for single gene
plotCounts(dds, gene="MOV10", intgroup="sampletype") 

# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="MOV10", intgroup="sampletype", returnData=TRUE)

# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0)) +
  geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle("MOV10") +
  theme(plot.title = element_text(hjust = 0.5))


## Order results by padj values
top20_sigOE_genes <- res_tableOE_tb %>% 
  arrange(padj) %>% 	#Arrange rows by padj values
  pull(gene) %>% 		#Extract character vector of ordered genes
  head(n=20) 		#Extract the first 20 genes

## normalized counts for top 20 significant genes
top20_sigOE_norm <- normalized_counts %>%
  filter(gene %in% top20_sigOE_genes)

# Gathering the columns to have normalized counts to a single column
gathered_top20_sigOE <- top20_sigOE_norm %>%
  gather(colnames(top20_sigOE_norm)[2:9], key = "samplename", value = "normalized_counts")

## check the column header in the "gathered" data frame
View(gathered_top20_sigOE)

gathered_top20_sigOE <- inner_join(mov10_meta, gathered_top20_sigOE)

# Let's plot now!
## plot using ggplot2
ggplot(gathered_top20_sigOE) +
  geom_point(aes(x = gene, y = normalized_counts, color = sampletype)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 Significant DE Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(hjust = 0.5))
```




