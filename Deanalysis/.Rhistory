res_tableKD_tb <- res_tableKD %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sigKD <- res_tableKD_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigKD
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
ggplot(data) +
geom_histogram(aes(x = Mov10_oe_1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
View(data)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
dds <- DESeq(dds)
plotDispEsts(dds)
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, type="ashr")
res_tableOE
## Setup
### Bioconductor and CRAN libraries used
library(tidyverse)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
dds <- DESeq(dds)
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
mcols(res_tableOE, use.names=T)
resultsNames(dds)
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken)
####### Consult with Dr. Lopes about "type" of lfcShrink to use. Default not working #######
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, type="ashr")
mcols(res_tableOE, use.names=T)
res_tableOE
dds <- DESeq(dds)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
meta
meta$sampletype = as.factor(meta$sampletype)
meta$MOVexpr = as.factor(meta$MOVexpr)
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
dds <- DESeq(dds)
resultsNames(dds)
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, type="ashr")
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken)
dds
contrast_oe
res_tableOE_unshrunken
resultsNames(dds)
####### Consult with Dr. Lopes about "type" of lfcShrink to use. Default not working #######
res_tableOE <- lfcShrink(dds, contrast="sampletype_MOV10_overexpression_vs_control", res=res_tableOE_unshrunken)
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE_unshrunken
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, type="ashr")
res_tableOE
carsData <- Cars93
head(carsData)
summary(carsData)
carsData <- Cars93
carsData <- Cars93
library(MASS)
carsData <- Cars93
head(carsData)
summary(carsData)
carsData = within(carsData, {AirBags = NULL
Model = NULL
Manufacturer=NULL
Make=NULL
Turn.circle = NULL
Min.Price = NULL
Max.Price = NULL
# Let's replace city MPG and highway MPG with average MPG
averageMPG = (MPG.city + MPG.highway) / 2
MPG.city = NULL
MPG.highway = NULL
})
model=lm(averageMPG~., data=carsData)
summary
summary(model)
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
# Create tibbles including row names
mov10_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
normalized_counts <- normalized_counts %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
class(meta)
class(data)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
# Define contrasts, extract results table, and shrink the log2 fold changes
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
####### Consult with Dr. Lopes about "type" of lfcShrink to use. Default not working #######
res_tableOE <- lfcShrink(dds, contrast=contrast_oe, res=res_tableOE_unshrunken, type="ashr")
class(res_tableOE)
# We'll take a look at our data frame
res_tableOE
## Define contrasts, extract results table and shrink log2 fold changes
contrast_kd <-  c("sampletype", "MOV10_knockdown", "control")
res_tableKD_unshrunken <- results(dds, contrast=contrast_kd, alpha = 0.05)
res_tableKD <- lfcShrink(dds, contrast=contrast_kd, res=res_tableKD_unshrunken, type="ashr")
res_tableKD
### Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 0.58
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigOE
res_tableKD_tb <- res_tableKD %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sigKD <- res_tableKD_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigKD
# Create tibbles including row names
mov10_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
normalized_counts <- normalized_counts %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
# Plot expression for single gene
plotCounts(dds, gene="MOV10", intgroup="sampletype")
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
# Create tibbles including row names
mov10_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
normalized_counts <- normalized_counts %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
# Plot expression for single gene
plotCounts(dds, gene="MOV10", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="MOV10", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("MOV10") +
theme(plot.title = element_text(hjust = 0.5))
top20_sigOE_genes <- res_tableOE_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sigOE_norm <- normalized_counts %>%
filter(gene %in% top20_sigOE_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sigOE <- top20_sigOE_norm %>%
gather(colnames(top20_sigOE_norm)[2:9], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sigOE)
gathered_top20_sigOE <- inner_join(mov10_meta, gathered_top20_sigOE)
# Let's plot now!
## plot using ggplot2
ggplot(gathered_top20_sigOE) +
geom_point(aes(x = gene, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
## Run analysis
dds <- DESeq(dds)
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
# Let's make sure that the normalized factors are in our data frame
sizeFactors(dds)
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
# Now that we have created our DESeq2Dataset object, let us normalize the count values by calling the estimateSizeFactors function (see below)
dds <- estimateSizeFactors(dds)
# Let's make sure that the normalized factors are in our data frame
sizeFactors(dds)
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
contrast_oe <- c("sampletype", "MOV10_overexpression", "control")
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef = 2, res=res_tableOE_unshrunken)
resultsNames(dds)
res_tableOE <- lfcShrink(dds, coef = 1, res=res_tableOE_unshrunken)
res_tableOE_unshrunken <- results(dds, contrast=contrast_oe, alpha = 0.05)
res_tableOE <- lfcShrink(dds, coef = 1, res=res_tableOE_unshrunken)
res_tableOE_unshrunken
res_tableOE <- lfcShrink(dds, coef = 2, res=res_tableOE_unshrunken)
res_tableOE <- lfcShrink(dds, coef = 2)
resultsNames()
resultsNames
## Run analysis
dds <- DESeq(dds)
## Run analysis
dds <- DESeq(dds)
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
# Now that we have created our DESeq2Dataset object, let us normalize the count values by calling the estimateSizeFactors function (see below)
dds <- estimateSizeFactors(dds)
# Let's make sure that the normalized factors are in our data frame
sizeFactors(dds)
## Create DESeq object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
res_tableOE <- lfcShrink(dds, coef = 2)
res_tableOE <- lfcShrink(dds, coef = 2)
res_tableOE_KD <- lfcShrink(dds, coef = 2)
res_tableOE_KD
res_tableKD_ashr <- lfcShrink(dds, contrast=contrast_kd, res=res_tableKD_unshrunken, type="ashr")
## Define contrasts, extract results table and shrink log2 fold changes
contrast_kd <-  c("sampletype", "MOV10_knockdown", "control")
res_tableKD_unshrunken <- results(dds, contrast=contrast_kd, alpha = 0.05)
res_tableKD_ashr <- lfcShrink(dds, contrast=contrast_kd, res=res_tableKD_unshrunken, type="ashr")
res_tableKD_ashr
res_tableKD_ashr
res_tableOE_KD
?lfcShrink()
## Setup
### Bioconductor and CRAN libraries used
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
class(meta)
class(data)
# Viewing the data to double-check before performing analysis
View(meta)
View(data)
# Let us now create our DeSeq2 Dataset object so we can run Prinicipal Component Analysis (PCA Analysis) later below
## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
# Now that we have created our DESeq2Dataset object, let us normalize the count values by calling the estimateSizeFactors function (see below)
dds <- estimateSizeFactors(dds)
# Let's make sure that the normalized factors are in our data frame
sizeFactors(dds)
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
# Let's write our normalized values out to a file to save it for further use
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
# Below we run PCA (Principal Component Analysis)
# Let us now moderate the variance for our normalized counts in order to improve the distances/clustering so we can properly perform/conduct principal component analysis (PCA)
# and hierarchical clustering
#rlog() function will transform the normalized counts
rld <- rlog(dds, blind=TRUE)
# Now that we have moderated the variance, let us run the PCA on our normalized RNA sequence counts
plotPCA(rld, intgroup="sampletype")
# Below we run the Differential Expression (DE) Analysis using our dds object we created above
## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
## Plot dispersion estimates
plotDispEsts(dds)
resultsNames(dds)
## Setup
### Bioconductor and CRAN libraries used
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(testthat) # Required library for unit tests performed below
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
test_that("classType", {
expect_equal(class(meta), "dataframe"),
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
test_that("classType", {
expect_equal(class(meta), "dataframe")
expect_equal(class(data), "dataframe")
})
class(meta)
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
test_that("classType", {
expect_equal(class(meta), "data.frame")
expect_equal(class(data), "data.frame")
})
# Viewing the data to double-check before performing analysis
View(meta)
View(data)
class(sigOE)
## Setup
### Bioconductor and CRAN libraries used
library(tidyverse)
library(RColorBrewer)
library(DESeq2)
library(pheatmap)
library(DEGreport)
library(ggplot2)
library(ggrepel)
library(testthat) # Required library for unit tests performed below
## Load in data
data <- read.table("data/Mov10_full_counts.txt", header=T, row.names=1)
meta <- read.table("meta/Mov10_full_meta.txt", header=T, row.names=1)
### Check classes of the data we just brought in
test_that("classType", {
expect_equal(class(meta), "data.frame")
expect_equal(class(data), "data.frame")
})
# Viewing the data to double-check before performing analysis
View(meta)
View(data)
# Let us now create our DeSeq2 Dataset object so we can run Prinicipal Component Analysis (PCA Analysis) later below
## Create DESeq2Dataset object
dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
# Now that we have created our DESeq2Dataset object, let us normalize the count values by calling the estimateSizeFactors function (see below)
dds <- estimateSizeFactors(dds)
# Let's make sure that the normalized factors are in our data frame
sizeFactors(dds)
# Let us compute the normalized RNA sequence counts
normalized_counts <- counts(dds, normalized=TRUE)
# Let's write our normalized values out to a file to save it for further use
write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
# Below we run PCA (Principal Component Analysis)
# Let us now moderate the variance for our normalized counts in order to improve the distances/clustering so we can properly perform/conduct principal component analysis (PCA)
# and hierarchical clustering
#rlog() function will transform the normalized counts
rld <- rlog(dds, blind=TRUE)
# Now that we have moderated the variance, let us run the PCA on our normalized RNA sequence counts
plotPCA(rld, intgroup="sampletype")
# Below we run the Differential Expression (DE) Analysis using our dds object we created above
## Run analysis
dds <- DESeq(dds)
resultsNames(dds)
## Plot dispersion estimates
plotDispEsts(dds)
# We will now perform our hypothesis testing using a Walfowitz test.
# Let's perform a Wald test and DE analysis for the MOV10_OE (overexpression) vs. the control group
# Let us now perform log2 shrinking (LFC)
res_tableOE <- lfcShrink(dds, coef = 3)
# Let's perform a Wald test and DE analysis for the MOV10_KD (knockdown) vs. the control group
# LFC Shrinking for the KnockDown genes
res_table_KD <- lfcShrink(dds, coef = 2)
# Let's extract DE genes for overexpression
## Summarize results
summary(res_tableOE)
### Set thresholds
padj.cutoff <- 0.05
lfc.cutoff <- 0.58
# Create a tibble from our res_tableOE
res_tableOE_tb <- res_tableOE %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sigOE <- res_tableOE_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigOE
class(sigOE)
sigOE
sigOE
# Let's extract DE genes for knockdown
summary(res_tableKD)
# Let's extract DE genes for knockdown
summary(res_table_KD)
res_tableKD_tb <- res_tableKD %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
# LFC Shrinking for the KnockDown genes
res_tableKD <- lfcShrink(dds, coef = 2)
# Let's extract DE genes for knockdown
summary(res_tableKD)
res_tableKD_tb <- res_tableKD %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sigKD <- res_tableKD_tb %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
sigKD
class(sigKD)
# Finally, let us visualize our results below
# Create tibbles including row names from meta and normalized_counts objects created earlier
mov10_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
normalized_counts <- normalized_counts %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
# Plot expression for single gene
plotCounts(dds, gene="MOV10", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="MOV10", intgroup="sampletype", returnData=TRUE)
# Plotting the MOV10 normalized counts, using the samplenames (rownames of d as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("MOV10") +
theme(plot.title = element_text(hjust = 0.5))
## Order results by padj values
top20_sigOE_genes <- res_tableOE_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20) 		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sigOE_norm <- normalized_counts %>%
filter(gene %in% top20_sigOE_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sigOE <- top20_sigOE_norm %>%
gather(colnames(top20_sigOE_norm)[2:9], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sigOE)
gathered_top20_sigOE <- inner_join(mov10_meta, gathered_top20_sigOE)
# Let's plot now!
## plot using ggplot2
ggplot(gathered_top20_sigOE) +
geom_point(aes(x = gene, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
class(resultsNames(dds))
# Below we run the Differential Expression (DE) Analysis using our dds object we created above
## Run analysis
dds <- DESeq(dds)
test_that("classTypeResultsNames", {
expect_equal(resultsNames(dds), "character")
})
test_that("classTypeResultsNames", {
expect_equal(class(resultsNames(dds)), "character")
})
